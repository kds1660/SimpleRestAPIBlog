{
  "topics": [
    {
      "name": "GET vs. POST",
      "author": "jQuery",
      "text": "The two most common \"methods\" for sending a request to a server are GET and POST. It's important to understand the proper application of each. The GET method should be used for non-destructive operations — that is, operations where you are only \"getting\" data from the server, not changing data on the server. For example, a query to a search service might be a GET request. GET requests may be cached by the browser, which can lead to unpredictable behavior if you are not expecting it. GET requests generally send all of their data in a query string. The POST method should be used for destructive operations — that is, operations where you are changing data on the server. For example, a user saving a blog post should be a POST request. POST requests are generally not cached by the browser; a query string can be part of the URL, but the data tends to be sent separately as post data.",
      "date": "2016-05-13T16:42:58.705Z"
    },
    {
      "name": "AJAX",
      "author": "jQuery",
      "text": "Traditionally webpages required reloading to update their content. For web-based email this meant that users had to manually reload their inbox to check and see if they had new mail. This had huge drawbacks: it was slow and it required user input. When the user reloaded their inbox, the server had to reconstruct the entire web page and resend all of the HTML, CSS, JavaScript, as well as the user's email. This was hugely inefficient. Ideally, the server should only have to send the user's new messages, not the entire page. By 2003, all the major browsers solved this issue by adopting the XMLHttpRequest (XHR) object, allowing browsers to communicate with the server without requiring a page reload. The XMLHttpRequest object is part of a technology called Ajax (Asynchronous JavaScript and XML). Using Ajax, data could then be passed between the browser and the server, using the XMLHttpRequest API, without having to reload the web page. With the widespread adoption of the XMLHttpRequest object it quickly became possible to build web applications like Google Maps, and Gmail that used XMLHttpRequest to get new map tiles, or new email without having to reload the entire page. Ajax requests are triggered by JavaScript code; your code sends a request to a URL, and when it receives a response, a callback function can be triggered to handle the response. Because the request is asynchronous, the rest of your code continues to execute while the request is being processed, so it's imperative that a callback be used to handle the response. Unfortunately, different browsers implement the Ajax API differently. Typically this meant that developers would have to account for all the different browsers to ensure that Ajax would work universally. Fortunately, jQuery provides Ajax support that abstracts away painful browser differences. It offers both a full-featured $.ajax() method, and simple convenience methods such as $.get(), $.getScript(), $.getJSON(), $.post(), and $().load().",
      "date": "2016-12-10T10:34:00.705Z"
    },
    {
      "name": "DataTables",
      "author": "jQuery",
      "text": "DataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. The stated goal of DataTables is \"To enhance the accessibility of data in HTML tables\". In order to achieve this we recognise that DataTables has two categories of users that interact with the interfaces the software has: End users - those who use the interface in the browser that you create with DataTables. Developers - yourself and the other developers working with DataTables to create your apps, sites, services, etc.",
      "date": "2016-11-01T16:16:34.705Z"
    }
  ]
}