{
  "topics": [
    {
      "name": "Intel & AMD Processor Hierarchy",
      "author": "kds",
      "img":"",
      "text": "Fans of our Best Gaming CPUs for the Money column will recognize the hierarchy chart as a side-by-side comparison tool designed to help you pick an appropriate processing upgrade. It groups CPUs with roughly similar gaming performance into tiers. The top tier contains the highest-performing CPUs available and gaming performance decreases as you descend.      This hierarchy was originally based on the average performance each CPU achieved in our test suite. We have since incorporated new game data into our criteria, but it should be known that any specific title will likely perform differently depending on its unique programming. Some games, for example, will be severely graphics subsystem-limited, while others may react positively to more CPU cores, larger amounts of on-die cache or even a specific architecture. We don't have access to every CPU on the market, so some of the placements are based on the results similar models deliver. Indeed, this hierarchy chart is useful as a general guideline, but certainly not as a one-size-fits-all CPU comparison resource. For that, we recommend you check out our CPU Performance Charts.      Perhaps you noticed that we split the former top tier in half, moving a handful of quad-module AMD CPUs up in the process. Recognizing that a lot of older platforms are going to be paired with graphics subsystems multiple generations old, we wanted to define the top of our range to encourage balance between host processing and complementary GPUs. At this point, anyone with a Sandy Bridge-based Core i7 would realize a gain from stepping up to Skylake or Haswell-E, for example. And putting AMD's top FX CPUs next to a handful of Core i7s and those older Core i5s represents an upgrade to their status.      ",
      "date": "2016-05-13T16:42:58.705Z"
    },
    {
      "name": "AJAX",
      "author": "jQuery",
      "img":"",
      "text": "Traditionally webpages required reloading to update their content. For web-based email this meant that users had to manually reload their inbox to check and see if they had new mail. This had huge drawbacks: it was slow and it required user input. When the user reloaded their inbox, the server had to reconstruct the entire web page and resend all of the HTML, CSS, JavaScript, as well as the user's email. This was hugely inefficient. Ideally, the server should only have to send the user's new messages, not the entire page. By 2003, all the major browsers solved this issue by adopting the XMLHttpRequest (XHR) object, allowing browsers to communicate with the server without requiring a page reload. The XMLHttpRequest object is part of a technology called Ajax (Asynchronous JavaScript and XML). Using Ajax, data could then be passed between the browser and the server, using the XMLHttpRequest API, without having to reload the web page. With the widespread adoption of the XMLHttpRequest object it quickly became possible to build web applications like Google Maps, and Gmail that used XMLHttpRequest to get new map tiles, or new email without having to reload the entire page. Ajax requests are triggered by JavaScript code; your code sends a request to a URL, and when it receives a response, a callback function can be triggered to handle the response. Because the request is asynchronous, the rest of your code continues to execute while the request is being processed, so it's imperative that a callback be used to handle the response. Unfortunately, different browsers implement the Ajax API differently. Typically this meant that developers would have to account for all the different browsers to ensure that Ajax would work universally. Fortunately, jQuery provides Ajax support that abstracts away painful browser differences. It offers both a full-featured $.ajax() method, and simple convenience methods such as $.get(), $.getScript(), $.getJSON(), $.post(), and $().load().",
      "date": "2016-12-10T10:34:00.705Z"
    },
    {
      "name": "DataTables",
      "author": "jQuery",
      "img":"",
      "text": "DataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. The stated goal of DataTables is \"To enhance the accessibility of data in HTML tables\". In order to achieve this we recognise that DataTables has two categories of users that interact with the interfaces the software has: End users - those who use the interface in the browser that you create with DataTables. Developers - yourself and the other developers working with DataTables to create your apps, sites, services, etc.",
      "date": "2016-11-01T16:16:34.705Z"
    }
  ]
}