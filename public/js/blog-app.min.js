var commentModule = angular.module('commentModule', ['commentServices']);
var loginModule = angular.module('loginModule', ['loginServices']);
var topicModule = angular.module('topicModule', ['topicServices']);
app.controller('commentController', function ($scope, $timeout, commentServices,topicServices) {
    tinymce.remove();
    if (!tinymce.activeEditor){
        setTimeout(function () {
            tinymce.init({
                width: "100%",
                height: "100%",
                selector: 'textarea',
                force_br_newlines: false,
                force_p_newlines: false,
                forced_root_block: ''
            });

        },10);
    }
    $scope.deleteComment = function ($index) {
        commentServices.delete({
            commentID:$scope.thisTopic.commentsFull[$index]._id},
            {topicName: $scope.thisTopic.name})
            .$promise.then(function () {
            $scope.thisTopic.comments=$scope.thisTopic.comments-1;
            $scope.thisTopic.commentsFull.splice($index, 1);
            $scope.setAllert(true, 'Comment deleted!');
        });
    };

    $scope.editComment = function ($index,$element) {
        angular.element(document.querySelectorAll('.panel-body')[$index]).addClass('selected')

       if (!tinymce.activeEditor) {
           $scope.thisTopic.commentsFull[$index].state='edit';
            tinymce.init({
                width: "100%",
                height: "100%",
               selector:'.selected',
                force_br_newlines: false,
                force_p_newlines: false,
                forced_root_block: ''
            });
        }
    };

    $scope.saveComment = function ($index,$element) {

        commentServices.update({commentID:$scope.thisTopic.commentsFull[$index]._id},{
            name: $scope.thisTopic.name,
            text:tinyMCE.activeEditor.getContent({format: 'raw'})
        }).$promise.then(function () {
            $scope.setAllert(true, 'Comment edited!');
            angular.element(document.querySelectorAll('.panel-body')[$index]).removeClass('selected');
            $scope.thisTopic.commentsFull[$index].state='view';
            tinymce.remove();
        }, function () {
            alert('error');
        })
    };


    $scope.addNewComment = function ($index,$element) {
        if (!tinymce.activeEditor){
       setTimeout(function () {
               tinymce.init({
                   width: "100%",
                   height: "100%",
                   selector: 'textarea',
                   force_br_newlines: false,
                   force_p_newlines: false,
                   forced_root_block: ''
               });

       },10);
        }
    };

    $scope.saveNewComment = function ($index,$element) {
        commentServices.update({commentID:$scope.thisTopic.name},{
            new: 'new',
            text:tinyMCE.activeEditor.getContent({format: 'raw'})
        }).$promise.then(function () {
            $scope.addComment=false;
            tinymce.remove();
            $scope.setAllert(true, 'Comment added!');
            $scope.thisTopic.comments=$scope.thisTopic.comments+1;
            topicServices.get({name: $scope.thisTopic.name}).$promise.then(function (response) {
                $scope.thisTopic.commentsFull=response.comments;
            });

        }, function () {
            alert('error');
        })

    };
});

/*
*/

loginModule.controller('loginController',function($scope,$timeout,loginServices,$rootScope){
    $scope.login={username:'',password:''};
    loginServices.get({name:'logged'}).$promise.then(function (response) {
        $scope.setName(response.data);
    });
    $scope.isAddUser=false;

    $scope.loginBtn=function () {
        window.scroll(0,0);
        loginServices.save($scope.login).$promise.then(function (response) {
            $scope.isLogged=response.username;
            $scope.setName(response.username);
                $scope.login={};
            $scope.setAllert(true, 'Logged!!')

        },function (response) {
            $scope.setAllert(false, 'Check login/password or register')
        });
    };

    $scope.logoutBtn=function () {
        window.scroll(0,0);
        loginServices.get({name:'logout'}).$promise.then(function (response) {
            $scope.isLogged=0;
            $scope.setName(0);
        })
    };

    $scope.registerBtn=function () {
        $scope.login={username:'',password:''};
        $scope.isAddUser=true;
    };

    $scope.addUser=function () {
       if (!$scope.login.username||!$scope.login.password) {
           $scope.setAllert(false,'Login or password null');
       } else {
           loginServices.update($scope.login).$promise.then (
               function (response) {
                   $scope.setAllert(true,'User added, try login!');
                   $scope.login={username:'',password:''};
                   $scope.isAddUser=false;
                   $timeout(function () {
                       $rootScope.allertFalse=false;
                       $rootScope.allertTrue=false;
                   },2000);
               }, function (response) {
                   $scope.setAllert(false,'User exist!');
               }
           )
       }
    };

    $scope.addTopicBtn=function () {
        $scope.setCurrentTopic({});
        $scope.thisTopic.date=Date();
        $scope.thisTopic.author=$scope.isLogged;
        $scope.setViewFormat('edit');

       setTimeout(function () {
           tinymce.init({
               width: "100%",
               height: "100%",
               selector: 'textarea',
               force_br_newlines: false,
               force_p_newlines: false,
               forced_root_block: ''
           })
       },100)
    };

});
topicModule.controller('panelController', function ($scope) {

    $scope.search=function () {
        $scope.setPage(0);
        console.log($scope.page)
        $scope.setSearchParams('','',$scope.panel.search);
        $scope.$$nextSibling.$$nextSibling.init();           //very bad solution

    };

    $scope.selectSelector=function (tab) {
        $scope.setDefaultSearchParams.tabSelect=tab;
        $scope.setSearchParams(tab)
    };

    $scope.isSelectSelector=function (tab) {
        return $scope.setDefaultSearchParams.tabSelect===tab;
    };

    $scope.selectSort=function (tab) {
        $scope.setDefaultSearchParams.tabSort=tab;
        $scope.setSearchParams('',tab)
    };

    $scope.isSelectSort=function (tab) {
        return $scope.setDefaultSearchParams.tabSort===tab;
    }
});

topicModule.controller('topicController', function ($scope, $timeout, topicServices) {
    $scope.init = function () {
        window.scroll(0,0);
        $scope.setPage(0);
        $scope.topic={};
        var requestParams={
            page:$scope.page,
            limit:$scope.limit,
            keyworld:$scope.setDefaultSearchParams.search,
            findBy:$scope.setDefaultSearchParams.tabSelect,
            sortBy:$scope.setDefaultSearchParams.tabSort
        };

        $scope.topic.data = [];
        $scope.setViewFormat('list');
        topicServices.query(requestParams).$promise.then(
            function (response) {
                $scope.topic.data = response;
            },
            function () {
                $scope.topic.data = [];
            }
        );
    };
    $scope.init();

    $scope.loadMore = function () {
        $scope.setPage($scope.page+1);
        var requestParams={
            page:$scope.page,
            limit:$scope.limit,
            keyworld:$scope.setDefaultSearchParams.search,
            findBy:$scope.setDefaultSearchParams.tabSelect,
            sortBy:$scope.setDefaultSearchParams.tabSort
        };
        topicServices.query(requestParams).$promise.then(
            function (response) {
                $scope.topic.data = $scope.topic.data.concat(response);
            }, function (response) {
                $scope.topicAllert = true;
                $timeout(function () {
                    $scope.topicAllert = false;
                }, 2000);
            }
        );
    };

    $scope.deleteTopic = function ($index) {
        topicServices.delete({name: $scope.topic.data[$index].name}).$promise.then(function () {
            $scope.topic.data.splice($index, 1);
            $scope.setAllert(true, 'Topic deleted!');
            $timeout(function () {
                $scope.allertFalse=false;
                $scope.allertTrue=false;
            },2000);
            $scope.init();
        });
    };


    $scope.viewTopic = function ($index) {
        $scope.setCurrentTopic($scope.topic.data[$index],$index);
        $scope.setViewFormat('view');
        topicServices.get({name: $scope.topic.data[$index].name}).$promise.then(function (response) {
            $scope.thisTopic.textFull=response.text;
            $scope.thisTopic.commentsFull=response.comments;
        });
    };
});



topicModule.controller('addTopicController', function ($scope, topicServices) {
    $scope.thisTopic={};
    $scope.thisTopic.date=new Date();
    $scope.thisTopic.author=$scope.isLogged;
    setTimeout(function () {
        tinymce.init({
            width: "100%",
            height: "100%",
            selector: 'textarea',
            force_br_newlines: false,
            force_p_newlines: false,
            forced_root_block: ''
        });
    }, 0);


    $scope.saveTopic = function () {
        $scope.thisTopic.text = tinyMCE.activeEditor.getContent({format: 'raw'});
        if ($scope.thisTopic.imgnew) $scope.thisTopic.img = $scope.thisTopic.imgnew;
        topicServices.update($scope.thisTopic.name, $scope.thisTopic).$promise.then(function () {
            $scope.setSearchParams('name','date','');
        }, function () {
            $scope.setAllert(true, 'Some error!');
          return false;
        })
    };
});



topicModule.controller('viewTopicController', function ($scope, $timeout, topicServices,$routeSegment) {
    $scope.thisTopic={};
    topicServices.get({name: $routeSegment.$routeParams.name}).$promise.then(function (response) {
        $scope.thisTopic=response;
        $scope.thisTopic.commentsFull=response.comments;
        $scope.thisTopic.comments=response.comments.length;
        $scope.thisTopic.textFull=response.text;


        if($routeSegment.$routeParams.edit) {
            $scope.name='Edit topic';
            $scope.thisTopic.oldTopic=$scope.thisTopic.name;
            tinymce.init({
                width: "100%",
                height: "100%",
                selector: 'textarea',
                force_br_newlines: false,
                force_p_newlines: false,
                forced_root_block: ''
            });
            setTimeout(function () {
                if (tinyMCE.activeEditor) tinyMCE.activeEditor.setContent((response.text));
            }, 300);
        }
    });

    $scope.saveTopic = function () {
        $scope.thisTopic.text = tinyMCE.activeEditor.getContent({format: 'raw'});
        if ($scope.thisTopic.imgnew) $scope.thisTopic.img = $scope.thisTopic.imgnew;
        topicServices.update($scope.thisTopic.name, $scope.thisTopic).$promise.then(function () {
            $scope.setSearchParams('name','date','');
        }, function () {
            alert('error');
        })
    };
});



commentServices=angular.module('commentServices', []);
commentServices.factory('commentServices', ['$resource' , function($resource){
return $resource('/api/comments/:commentID',{commentID:'@commentID',topicName:'@topicName'},{
    'update':{method:'PUT'}
});
}]);
loginServices=angular.module('loginServices', []);
loginServices.factory('loginServices', ['$resource',function($resource){
    return $resource('/api/login/:name',{name:'@name'},{
        'update':{method:'PUT'},
        'get':{
            method:'get',
            transformResponse:function (data) {
             return {data:data}
            },
            'update':{method:'PUT'}
        }
    });
}]);
topicServices=angular.module('topicServices', []);
topicServices.factory('topicServices', ['$resource' , function($resource){
return $resource('/api/topic/:name',{name:'@name'},{
    'update':{method:'PUT'}
});
}]);
app.directive("commentView", function() {
    return {
        restrict : "E",
        templateUrl : "/templates/commentTemplate.html",
        controller:'commentController',
        controllerAs:'comment'
    };
});
app.directive("whenScrolled", function($window) {
    function getDocHeight() {
        var D = document;
        return Math.max(
            Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
            Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
            Math.max(D.body.clientHeight, D.documentElement.clientHeight)
        );
    }
   return function (scope, elm, attr) {
       var raw=elm[0];
       angular.element($window).bind('scroll',function () {
           if (getDocHeight() <= $window.pageYOffset+ $window.innerHeight+2) {
            scope.$apply(attr.whenScrolled);
           }
       })
   }
});

app.directive("fileread", [function () {
    return {
        scope: {
            fileread: "="
        },
        link: function (scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    scope.$apply(function () {
                        scope.fileread = loadEvent.target.result;
                    });
                }
                reader.readAsDataURL(changeEvent.target.files[0]);
            });
        }
    }
}]);

var loginElement = angular.module('loginElement', []);
app.directive("loginLogout",function() {
    return {
        scope:false,
        restrict : "E",
        templateUrl : "templates/loginTemplate.html",
    };
});
app.directive("topicPost", function() {
    return {
        restrict : "E",
        templateUrl : "templates/topicTemplate.html",
        controller:'topicController',
        controllerAs:'topic'
    };
});
app.config(function ($routeSegmentProvider, $routeProvider, $locationProvider) {

    $routeSegmentProvider

        .when('/main', 's1')
        .when('/view/:name', 's2')
        .when('/view/:name/comments', 's2.comments')
        .when('/view/:name/addComment', 's2.addComment')
        .when('/edit/:name', 's3')
        .when('/add/', 's4')

        .segment('s1', {
            default: true,
            template: '<topic-post ></topic-post>',
            controller: 'topicController',
            controllerAs: 'topic'
        })

        .segment('s2', {
            default: true,
            templateUrl: '/templates/topicView.html',
            controller: 'viewTopicController'
        })
        .within()
        .segment('comments', {
            template: '<comment-view></comment-view>',
            controller: 'commentController',
            contollreAs: 'comment'
        })
        .segment('addComment', {
            templateUrl: '/templates/commentAdd.html',
            controller: 'commentController',
            contollreAs: 'comment'
        })
        .up()
        .segment('s3', {
            default: true,
            templateUrl: '/templates/topicEdit.html',
            controller: 'viewTopicController'
        })

        .segment('s4', {
            default: true,
            templateUrl: '/templates/topicEdit.html',
            controller: 'addTopicController'
        })

    $locationProvider.html5Mode({
        enabled: true,
        requireBase: false
    });
    $routeProvider.otherwise({redirectTo: '/main'});
});