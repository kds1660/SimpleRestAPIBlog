app.directive("whenScrolled", function($window) {
    function getDocHeight() {
        var D = document;
        return Math.max(
            Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
            Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
            Math.max(D.body.clientHeight, D.documentElement.clientHeight)
        );
    }
   return function (scope, elm, attr) {
       var raw=elm[0];
       angular.element($window).bind('scroll',function () {
           if (getDocHeight() <= $window.pageYOffset+ $window.innerHeight+2) {
            scope.$apply(attr.whenScrolled);
           }
       })
   }
});

app.directive("fileread", [function () {
    return {
        scope: {
            fileread: "="
        },
        link: function (scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    scope.$apply(function () {
                        scope.fileread = loadEvent.target.result;
                    });
                }
                reader.readAsDataURL(changeEvent.target.files[0]);
            });
        }
    }
}]);

app.controller('mainController', function($scope,$timeout){
    $scope.isLogged=0;
    $scope.alert={};
    $scope.alert.text='s';
    $scope.setName = function(name){
        $scope.isLogged = name;
    };
    $scope.setAllert=function (trueFalse,text) {
        console.log(trueFalse,text)
        if (trueFalse===true) {
            $scope.allertTrue=true;
            $scope.alert.text=text;
        };
        if (trueFalse===false) {
            $scope.allertFalse=true
            $scope.alert.text=text;
        };
        $timeout(function () {
            $scope.allertFalse=false;
            $scope.allertTrue=false;
        },2000);

    }
});
var topicModule = angular.module('topicModule', ['topicServices']);
topicServices=angular.module('topicServices', []);
topicServices.factory('topicServices', ['$resource' , function($resource){
return $resource('/api/topic/:name',{name:'@name'},{
    'update':{method:'PUT'}
});
}]);
var page = 0;
var limit = 2;
app.controller('topicController', function ($scope, $timeout, topicServices) {
    function copyObj(obj) {
        var newobj = {};
        for (key in obj) {
            newobj[key] = obj[key]
        }
        return newobj;
    };

    $scope.init = function () {
        $scope.topic.data = [];
        page = 0;
        $scope.viewformat = 'list';
        topicServices.query({}).$promise.then(
            function (response) {
                $scope.topic.data = response;
            }
        );
    };

    $scope.init();

    $scope.loadMore = function () {
        page++;
        topicServices.query({page: page, limit: limit}).$promise.then(
            function (response) {
                $scope.topic.data = $scope.topic.data.concat(response);
            }, function (response) {
                $scope.topicAllert = true;
                $timeout(function () {
                    $scope.topicAllert = false;
                }, 2000);
            }
        );
    };

    $scope.deleteTopic = function ($index) {
        topicServices.delete({name: $scope.topic.data[$index].name}).$promise.then(function () {
            $scope.topic.data.splice($index, 1);
            $scope.setAllert(true, 'Topic deleted!')
            $scope.init();
        });
    };


    $scope.viewTopic = function ($index) {
        $scope.thisTopic = copyObj($scope.topic.data[$index]);
        $scope.viewformat = 'view';
        topicServices.get({name: $scope.topic.data[$index].name}).$promise.then(function (response) {
            $scope.thisTopic.textFull = response.text;
        });
    };

    $scope.back = function () {
        $scope.viewformat = 'list';
    };

    $scope.edit = function ($index) {
        $scope.viewformat = 'edit';
        $scope.thisTopic = copyObj($scope.topic.data[$index]);
        $scope.thisTopic.oldTopic = $scope.thisTopic.name;
        topicServices.get({name: $scope.thisTopic.name}).$promise.then(function (response) {
            $scope.thisTopic.textFull = response.text;

            tinymce.init({
                width: "100%",
                height: "100%",
                selector: 'textarea',
                force_br_newlines: false,
                force_p_newlines: false,
                forced_root_block: ''
            });
            setTimeout(function () {
                if (tinyMCE.activeEditor) tinyMCE.activeEditor.setContent((response.text));
            }, 300);
        });
    };

    $scope.SaveTopic = function () {

        $scope.thisTopic.text = tinyMCE.activeEditor.getContent({format: 'raw'});
        if ($scope.thisTopic.imgnew) $scope.thisTopic.img = $scope.thisTopic.imgnew;
        topicServices.update($scope.thisTopic.name, $scope.thisTopic).$promise.then(function () {
            $scope.init();
        }, function () {
            alert('error');
        })
    };

});


app.directive("topicPost", function() {
    return {
        restrict : "E",
        templateUrl : "templates/topicTemplate.html",
    };
});
var loginModule = angular.module('loginModule', ['loginServices']);
loginServices=angular.module('loginServices', []);
loginServices.factory('loginServices', ['$resource',function($resource){
    return $resource('/api/login/:name',{name:'@name'},{
        'update':{method:'PUT'},
        'get':{
            method:'get',
            transformResponse:function (data) {
             return {data:data}
            },
            'update':{method:'PUT'}
        }
    });
  /*  return {
        login:function (name) {
            var deferred=$q.defer();
            requestService.getData(ENUM_Queries.login,'',name).then(function (data) {
                deferred.resolve(data);
            },function (data,status) {
                deferred.reject(status)
            });
            return deferred.promise;
        },
        isLogged:function () {
            var deferred=$q.defer();
            requestService.getData(ENUM_Queries.checklogin).then(function (data) {
                deferred.resolve(data);
            },function (data,status) {
                deferred.reject(status)
            });
            return deferred.promise;
        },
        logout:function () {
            var deferred=$q.defer();
            requestService.getData(ENUM_Queries.logout).then(function (data) {
                deferred.resolve(data);
            },function (data,status) {
                deferred.reject(status)
            });
            return deferred.promise;
        },
        addUser:function (login) {
            var deferred=$q.defer();
            requestService.getData(ENUM_Queries.addUser,'',login).then(function (data) {
                deferred.resolve(data);
            },function (data,status) {
                deferred.reject(status)
            });
            return deferred.promise;
        }

    }*/
}]);
loginModule.controller('loginController',function($scope,$timeout,loginServices){
    $scope.allert={};
    $scope.login={username:'',password:''};
    loginServices.get({name:'logged'}).$promise.then(function (response) {
        console.log(response)
        $scope.isLogged=response.data;
        $scope.setName(response.data);
    });
    $scope.isAddUser=false;

    $scope.loginBtn=function () {
        loginServices.save($scope.login).$promise.then(function (response) {
            $scope.isLogged=response.username;
            $scope.setName(response.username);
                $scope.login={};
            $scope.allert.text='You logged'
            $scope.allertTrue=true;

        },function (response) {
            $scope.allert.text='Check login/password or register'
            $scope.allertFalse=true;
        });
        $timeout(function () {
            $scope.allertFalse=false;
                $scope.allertTrue=false;
        },2000)

    };
    $scope.logoutBtn=function () {
        loginServices.get({name:'logout'}).$promise.then(function (response) {
            $scope.isLogged=0;
            $scope.setName(0);
        })
    };

    $scope.registerBtn=function () {
        $scope.login={username:'',password:''};
        $scope.isAddUser=true;
    };

    $scope.addUser=function () {
       if (!$scope.login.username||!$scope.login.password) {
           $scope.allert.text='Login or password null'
           $scope.allertFalse=true;
       } else {
           loginServices.update($scope.login).$promise.then (
               function (response) {
                   $scope.setAllert(true,'User added, try login!');
                   $scope.login={username:'',password:''};
                   $scope.isAddUser=false;
               }, function (response) {
                   $scope.allert.text='User exist!';
                   $scope.allertFalse=true;
               }
           )
       }

        $timeout(function () {
            $scope.allertFalse=false;
            $scope.allertTrue=false;
        },2000);

    };

});
var loginElement = angular.module('loginElement', []);
app.directive("loginLogout",function() {
    return {
        scope:false,
        restrict : "E",
        templateUrl : "templates/loginTemplate.html",
    };
});